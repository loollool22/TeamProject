package com.itwillbs.dao;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.itwillbs.domain.MemberDTO;

@Repository
public class MemberDAOImpl implements MemberDAO{

	//마이바티스 객체생성
	@Inject //root-context의 sqlSession을 인식
	private SqlSession sqlSession;
	
	//반복되는 부분을 변수에 넣었다.
	private static final String namespace="com.itwillbs.member.MemberMapper";
	
	@Override
	public void insertMember(MemberDTO memberDTO) {
		System.out.println("MemberDAOImpl insertMember()");
		//디비작업
		//메서드 호출
		System.out.println(namespace+".insertMember");
		sqlSession.insert(namespace+".insertMember", memberDTO);
		//namespace가 com.itwillbs.member.MemberMapper의 위치라는 것을 위에 정의
		//다음 insertMember를 찾아서 memberDTO를 입력해라
		//결론적으로 com.itwillbs.member.MemberMapper.inserMember를 찾아가는 의미
		
//		sqlSession.selectOne(namespace+".userCheck", memberDTO); //하나만 리턴 시
//		sqlSession.selectList(namespace, memberDTO); //리스트 전체를 즉 여러개 리턴 시
	}

	@Override
	public MemberDTO userCheck(MemberDTO memberDTO) { 
		//insert할 때 MemberDTO형의 memberDTO 매개변수로 값을 넣기 때문에 
		//userCheck시 MemberDTO형으로 리턴을 실시해야 DB정보와 정확히 비교가 가능
		//즉, DB랑 비교시는 들어가 있는 형태를 따라야한다.
		//DB에 memberDTO형으로 들어가 있으니 아래 memberMapper.xml로 넘어가는 데이터가 memberDTO형이라야
		//memberMapper의 select 구문이 정확히 비교 가능
		
		System.out.println("MemberDAOImpl userCheck()");
		System.out.println(namespace+".userCheck");
		
		//한개를 리턴 받겠다 => selectOne
		return sqlSession.selectOne(namespace+".userCheck", memberDTO);
	}

	@Override
	public MemberDTO getMember(String id) {
		System.out.println("MemberDAOImpl getMember()");
		
		return sqlSession.selectOne(namespace+".getMember", id);
	}
	
	
}
